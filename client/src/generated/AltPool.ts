/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.9.4
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

export interface AltPoolDef {
    read: (callParams: CallParams$$<null>) => { address: string; nonce: number; }[] | Promise<{ address: string; nonce: number; }[]>;
    write: (peer_id: string, user_op: { address: string; nonce: number; }, client: boolean, callParams: CallParams$$<'peer_id' | 'user_op' | 'client'>) => boolean | Promise<boolean>;
}
export function registerAltPool(service: AltPoolDef): void;
export function registerAltPool(serviceId: string, service: AltPoolDef): void;
export function registerAltPool(peer: FluencePeer, service: AltPoolDef): void;
export function registerAltPool(peer: FluencePeer, serviceId: string, service: AltPoolDef): void;
       

export function registerAltPool(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "AltPool",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "read" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "UserOperation",
                                "fields" : {
                                    "address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "nonce" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "write" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "user_op" : {
                            "tag" : "struct",
                            "name" : "UserOperation",
                            "fields" : {
                                "address" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "nonce" : {
                                    "tag" : "scalar",
                                    "name" : "i64"
                                }
                            }
                        },
                        "client" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface BundlerDef {
    peers: (callParams: CallParams$$<null>) => string[] | Promise<string[]>;
    register: (peer_id: string, callParams: CallParams$$<'peer_id'>) => boolean | Promise<boolean>;
}
export function registerBundler(service: BundlerDef): void;
export function registerBundler(serviceId: string, service: BundlerDef): void;
export function registerBundler(peer: FluencePeer, service: BundlerDef): void;
export function registerBundler(peer: FluencePeer, serviceId: string, service: BundlerDef): void;
       

export function registerBundler(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "Bundler",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "peers" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    ]
                }
            },
            "register" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 

export function readPool(
    peer_id: string,
    config?: {ttl?: number}
): Promise<{ address: string; nonce: number; }[]>;

export function readPool(
    peer: FluencePeer,
    peer_id: string,
    config?: {ttl?: number}
): Promise<{ address: string; nonce: number; }[]>;

export function readPool(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id ("AltPool" "read") [] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "readPool",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "UserOperation",
                        "fields" : {
                            "address" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "nonce" : {
                                "tag" : "scalar",
                                "name" : "i64"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getPeers(
    bundler_peer_id: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function getPeers(
    peer: FluencePeer,
    bundler_peer_id: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function getPeers(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "bundler_peer_id") [] bundler_peer_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call bundler_peer_id ("Bundler" "peers") [] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "getPeers",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "bundler_peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type WriteToPoolArgUser_op = { address: string; nonce: number; } 

export function writeToPool(
    user_op: WriteToPoolArgUser_op,
    peer_id: string,
    client: boolean,
    config?: {ttl?: number}
): Promise<boolean>;

export function writeToPool(
    peer: FluencePeer,
    user_op: WriteToPoolArgUser_op,
    peer_id: string,
    client: boolean,
    config?: {ttl?: number}
): Promise<boolean>;

export function writeToPool(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "user_op") [] user_op)
                          )
                          (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "client") [] client)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id ("AltPool" "write") [peer_id user_op client] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "writeToPool",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "user_op" : {
                    "tag" : "struct",
                    "name" : "UserOperation",
                    "fields" : {
                        "address" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "nonce" : {
                            "tag" : "scalar",
                            "name" : "i64"
                        }
                    }
                },
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "client" : {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function registerPeer(
    bundler_peer_id: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function registerPeer(
    peer: FluencePeer,
    bundler_peer_id: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function registerPeer(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "bundler_peer_id") [] bundler_peer_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call bundler_peer_id ("Bundler" "register") [%init_peer_id%] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "registerPeer",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "bundler_peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
